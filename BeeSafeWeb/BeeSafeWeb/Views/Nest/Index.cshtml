@model X.PagedList.IPagedList<BeeSafeWeb.Models.NestEstimate>
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using X.PagedList.Mvc.Core
@{
    ViewData["Title"] = "Nest Estimates";
}

<div class="p-4">
    <div>
        <h1 class="text-3xl font-bold dark:text-yellow-400 text-center md:text-left">Nest Estimates</h1>
        <p class="dark:text-gray-300 text-center md:text-left">Here you can view and update the status of hornet nests.</p>
    </div>
    
    <!-- Filtering Form -->
    <form method="get" class="mt-4 flex flex-wrap gap-4 justify-end ">
        <div>
            <select name="isDestroyed" class="p-2 border rounded-md dark:bg-gray-700 dark:text-white">
                <option value="">All</option>
                <option value="true" selected="@(ViewBag.IsDestroyed == true)">Destroyed</option>
                <option value="false" selected="@(ViewBag.IsDestroyed == false)">Active</option>
            </select>
        </div>

        <div>
            <button type="submit" class="px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600">
                Filter
            </button>
            <a href="@Url.Action("Index")" class="px-4 py-2 bg-gray-400 text-white rounded-lg hover:bg-gray-500">
                Reset
            </a>
        </div>
    </form>

    <form method="post" asp-action="BatchUpdate" asp-controller="Nest" id="updateForm">
        <div class="overflow-x-auto">
            <table class="w-full border border-gray-300 dark:border-gray-600 text-gray-800 dark:text-gray-300 shadow-lg mt-6 text-sm md:text-base">
                <thead class="bg-gray-300 dark:bg-gray-700">
                <tr>
                    <th class="p-2 md:p-3">Location</th>
                    <th class="p-2 md:p-3">City</th>
                    <th class="p-2 md:p-3">Accuracy</th>
                    <th class="p-2 md:p-3">Status</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var nest in Model)
                {
                    <tr class="border-t border-gray-200 text-center dark:border-gray-600">
                        <td class="p-2 md:p-3">
                            <button class="px-3 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 w-full md:w-auto"
                                    type="button"
                                    onclick="showNestLocation(
                                @nest.EstimatedLatitude.ToString(System.Globalization.CultureInfo.InvariantCulture),
                                @nest.EstimatedLongitude.ToString(System.Globalization.CultureInfo.InvariantCulture),
                                @nest.AccuracyLevel,
                                @(nest.IsDestroyed.ToString().ToLower())
                                    )">
                                Show Location
                            </button>
                        </td>
                        <td class="p-2 md:p-3 city-cell"
                            data-lat="@nest.EstimatedLatitude.ToString(System.Globalization.CultureInfo.InvariantCulture)"
                            data-lng="@nest.EstimatedLongitude.ToString(System.Globalization.CultureInfo.InvariantCulture)">
                            Loading...
                        </td>
                        <td class="p-2 md:p-3">@nest.AccuracyLevel m</td>
                        <td class="p-2 md:p-3">
                            <input type="hidden" name="nestUpdates[@nest.Id].Id" value="@nest.Id" />
                            <select name="nestUpdates[@nest.Id].IsDestroyed" class="w-full p-2 border rounded-md dark:bg-gray-700 dark:text-white update-field">
                                <option value="false" selected="@(nest.IsDestroyed == false)">Active</option>
                                <option value="true" selected="@(nest.IsDestroyed == true)">Destroyed</option>
                            </select>
                        </td>
                    </tr>
                }
                </tbody>
            </table>

            <div id="saveButtonContainer" class="flex justify-end m-5">
                <button id="saveButton" type="submit" class="px-6 py-2 bg-gray-400 text-white rounded-lg shadow-md cursor-not-allowed" disabled>
                    Save Changes
                </button>
            </div>

        </div>

   
    </form>

    <!-- Pagination Controls -->
    <div class="mt-6 flex justify-center">
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page }),
        new PagedListRenderOptions
        {
        DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
        DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,
        DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded,
        DisplayLinkToNextPage = PagedListDisplayMode.IfNeeded,
        MaximumPageNumbersToDisplay = 5,
        LiElementClasses = new string[] { "mx-1 px-3 py-2 border rounded-lg bg-gray-200 dark:bg-gray-600 hover:bg-yellow-500 dark:hover:bg-yellow-400" },
        UlElementClasses = new string[] { "flex space-x-2" }
        })
    </div>

</div>

<!-- Modal for Leaflet Map -->
<div id="mapModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center px-4">
    <div class="bg-white rounded-lg p-6 max-w-3xl w-full max-h-[80vh] relative dark:bg-gray-800 shadow-lg">
        <h2 class="text-2xl font-bold dark:text-yellow-400 mb-4 text-center">Nest Location</h2>
        <div id="nestMap" class="w-full h-[50vh] rounded-lg"></div>
        <div class="flex justify-center mt-4">
            <button onclick="closeModal()" class="px-6 py-2 bg-red-500 text-white rounded-lg shadow-md hover:bg-red-600">
                Close
            </button>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        
        // save button to save changes when a value changes 

        document.addEventListener('DOMContentLoaded', function() {
            const updateFields = document.querySelectorAll('.update-field');
            const saveButton = document.getElementById('saveButton');

            // Store the initial values of all select fields
            const initialValues = {};
            updateFields.forEach(field => {
                initialValues[field.name] = field.value;
            });

            function checkIfChanged() {
                let hasChanges = false;
                updateFields.forEach(field => {
                    if (field.value !== initialValues[field.name]) {
                        hasChanges = true;
                    }
                });

                if (hasChanges) {
                    saveButton.classList.remove('bg-gray-400', 'cursor-not-allowed');
                    saveButton.classList.add('bg-yellow-500', 'hover:bg-yellow-600', 'cursor-pointer');
                    saveButton.removeAttribute('disabled');
                } else {
                    saveButton.classList.remove('bg-yellow-500', 'hover:bg-yellow-600', 'cursor-pointer');
                    saveButton.classList.add('bg-gray-400', 'cursor-not-allowed');
                    saveButton.setAttribute('disabled', 'true');
                }
            }

            updateFields.forEach(field => {
                field.addEventListener('change', checkIfChanged);
            });

            checkIfChanged();  // Run initially to set correct button state
        });



    //using longitude and latitude load the names of the cities where the hornets nest is located
    async function getCityName(lat, lng) {
        const key = `city_${lat}_${lng}`;
        const cachedCity = localStorage.getItem(key);

        if (cachedCity) {
            return cachedCity;  // Return from cache
        }

        const formattedLat = parseFloat(lat).toFixed(6);
        const formattedLng = parseFloat(lng).toFixed(6);
        const url = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${formattedLat}&lon=${formattedLng}`;

        try {
            const response = await fetch(url);
            const data = await response.json();
            if (data && data.address) {
                const cityName = data.address.city || data.address.town || data.address.village || "Unknown Location";
                localStorage.setItem(key, cityName);  // Cache the result
                return cityName;
            }
        } catch (error) {
            console.error("Error fetching city:", error);
            return "Error loading city";
        }
        return "Unknown Location";
    }

    async function loadCityNames() {
        const cityCells = document.querySelectorAll('.city-cell');

        const requests = Array.from(cityCells).map(async (cell) => {
            const lat = cell.getAttribute('data-lat');
            const lng = cell.getAttribute('data-lng');
            const cityName = await getCityName(lat, lng);
            cell.innerText = cityName;
        });

        await Promise.all(requests);
    }

    // Load city names once page is loaded
    document.addEventListener('DOMContentLoaded', loadCityNames);


    var map;
    var circle;

    function showNestLocation(lat, lng, accuracy, isDestroyed) {

        document.getElementById('mapModal').classList.remove('hidden');

        setTimeout(() => {
            if (!map) {
                map = L.map('nestMap').setView([lat, lng], 18);
                L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    maxZoom: 19,
                }).addTo(map);
            } else {
                map.setView([lat, lng], 18);
            }

            // Remove existing circle if present
            if (circle) {
                map.removeLayer(circle);
            }

            const circleColor = isDestroyed ? 'green' : 'red';
            const fillColor = isDestroyed ? '#28a745' : '#dc3545';

            // Add a circle at the given location with accuracy level as radius
            circle = L.circle([lat, lng], {
                color: circleColor, 
                fillColor: fillColor, 
                fillOpacity: 0.5,
                radius: accuracy 
            }).addTo(map).bindPopup(`Accuracy: ${accuracy} meters<br>Status: ${isDestroyed ? 'Destroyed' : 'Active'}`).openPopup();

        }, 300);
    }

    function closeModal() {
        document.getElementById('mapModal').classList.add('hidden');
    }


    </script>
}
